# 基于Spring AI的出入库管理系统AI助手集成方案

我将为您的出入库管理系统添加一个AI助手页面，使用Spring AI集成DeepSeek 1.3b模型，实现自然语言到SQL的转换和执行功能。

## 系统架构升级

```
出入库管理系统
├── 核心功能（已有）
└── AI助手模块
    ├── AI服务层（自然语言处理）
    ├── SQL生成与执行
    └── 结果展示
```

## 实现步骤

### 1. 添加Spring AI依赖

在`pom.xml`中添加：

```xml
<!-- Spring AI -->
<dependency>
    <groupId>org.springframework.ai</groupId>
    <artifactId>spring-ai-openai-spring-boot-starter</artifactId>
    <version>0.8.1</version>
</dependency>

<!-- 其他可能需要的依赖 -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-webflux</artifactId>
</dependency>
```

### 2. 配置AI模型连接

在`application.properties`中添加：

```properties
# Spring AI Configuration for LM Studio
spring.ai.openai.base-url=http://localhost:1234/v1  # LM Studio默认API地址
spring.ai.openai.api-key=lm-studio  # 任意非空值
spring.ai.openai.chat.options.model=deepseek-ai/deepseek-coder-1.3b-instruct

# 数据库配置（已存在）
spring.datasource.url=jdbc:mysql://localhost:3306/inventory_system
spring.datasource.username=root
spring.datasource.password=yourpassword
```

### 3. 创建AI服务层

```java
package com.example.inventory.service.ai;

import org.springframework.ai.chat.ChatClient;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.chat.prompt.PromptTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class AISQLAssistantService {

    private final ChatClient chatClient;
    private final JdbcTemplate jdbcTemplate;

    // 系统提示词 - 指导模型生成SQL
    private static final String SYSTEM_PROMPT = """
        你是一个MySQL数据库专家。给定下面的数据库表结构，请根据用户的问题生成相应的SQL查询语句。
        注意：
        1. 只生成SQL语句，不要有其他任何解释或前缀后缀
        2. 只允许操作以下表：product, warehouse, stock_in, stock_out, inventory
        3. 用户可能要求查询、更新、插入或删除操作，请根据问题生成合适的SQL
        4. 如果用户的问题无法通过SQL完成，则回答："无法完成该操作"
        
        表结构：
        - product (id, name, description, category, unit_price, unit, created_at)
        - warehouse (id, name, location, capacity)
        - stock_in (id, product_id, warehouse_id, quantity, operator, in_time, notes)
        - stock_out (id, product_id, warehouse_id, quantity, operator, out_time, notes)
        - inventory (id, product_id, warehouse_id, quantity, last_updated)
        
        示例：
        用户：查询所有商品名称
        SQL：SELECT name FROM product
        
        用户：将商品A入库100个到仓库1
        SQL：INSERT INTO stock_in (product_id, warehouse_id, quantity, operator) 
              VALUES ((SELECT id FROM product WHERE name='商品A'), 
                      (SELECT id FROM warehouse WHERE name='仓库1'), 
                      100, 'AI助手')
        """;

    @Autowired
    public AISQLAssistantService(ChatClient chatClient, JdbcTemplate jdbcTemplate) {
        this.chatClient = chatClient;
        this.jdbcTemplate = jdbcTemplate;
    }

    public Object processNaturalLanguageQuery(String userInput) {
        try {
            // 1. 生成SQL
            String sql = generateSQL(userInput);
            
            if (sql == null || sql.trim().isEmpty()) {
                return "无法生成SQL语句";
            }
            
            // 2. 执行SQL
            return executeSQL(sql);
        } catch (Exception e) {
            return "处理出错: " + e.getMessage();
        }
    }

    private String generateSQL(String userInput) {
        // 构造完整的提示
        String fullPrompt = SYSTEM_PROMPT + "\n用户：" + userInput + "\nSQL：";
        Prompt prompt = new Prompt(fullPrompt);
        
        // 调用模型
        String sql = chatClient.call(prompt).getResult().getOutput().getContent();
        
        // 清理SQL：去除可能的多余字符
        sql = sql.trim();
        
        // 如果模型生成了多个SQL语句，我们只取第一个（用分号分割）
        if (sql.contains(";")) {
            sql = sql.split(";")[0].trim();
        }
        
        return sql;
    }

    private Object executeSQL(String sql) {
        String lowerCaseSql = sql.toLowerCase();
        
        // 判断SQL类型
        if (lowerCaseSql.startsWith("select")) {
            // 查询操作
            return jdbcTemplate.queryForList(sql);
        } else if (lowerCaseSql.startsWith("insert") || 
                   lowerCaseSql.startsWith("update") || 
                   lowerCaseSql.startsWith("delete")) {
            // 更新操作
            int rowsAffected = jdbcTemplate.update(sql);
            return Map.of(
                "message", "操作成功",
                "rowsAffected", rowsAffected,
                "operation", sql.split(" ")[0].toUpperCase()
            );
        } else {
            throw new IllegalArgumentException("不支持的SQL操作类型: " + sql);
        }
    }
}
```

### 4. 创建AI助手控制器

```java
package com.example.inventory.controller.ai;

import com.example.inventory.service.ai.AISQLAssistantService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/ai-assistant")
public class AIAssistantController {

    private final AISQLAssistantService aiAssistantService;

    @Autowired
    public AIAssistantController(AISQLAssistantService aiAssistantService) {
        this.aiAssistantService = aiAssistantService;
    }

    @GetMapping
    public String aiAssistantPage() {
        return "ai-assistant";
    }

    @PostMapping("/query")
    public String handleUserQuery(@RequestParam("userInput") String userInput, Model model) {
        Object result = aiAssistantService.processNaturalLanguageQuery(userInput);
        model.addAttribute("result", result);
        model.addAttribute("userInput", userInput);
        return "ai-assistant";
    }
}
```

### 5. 创建AI助手页面

在`templates`目录下创建`ai-assistant.html`:

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layout}">
<head>
    <title>AI助手</title>
    <style>
        .chat-container {
            height: 500px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        .user-message {
            background-color: #e3f2fd;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
            max-width: 80%;
            align-self: flex-end;
        }
        .ai-message {
            background-color: #fff;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
            max-width: 80%;
            align-self: flex-start;
            border: 1px solid #eee;
        }
        .message-container {
            display: flex;
            flex-direction: column;
        }
        .sql-preview {
            background-color: #f5f5f5;
            padding: 10px;
            border-left: 3px solid #4CAF50;
            margin: 10px 0;
            font-family: monospace;
            font-size: 0.9em;
            display: none;
        }
        .timestamp {
            font-size: 0.8em;
            color: #777;
            text-align: right;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div layout:fragment="content">
        <div class="container-fluid">
            <h2 class="mb-4">AI助手</h2>
            
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">自然语言查询助手</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="chat-container" id="chatContainer">
                            <!-- 聊天记录将在这里显示 -->
                            <div class="ai-message">
                                您好！我是库存管理AI助手。您可以使用自然语言查询库存信息或执行出入库操作。
                                <div class="timestamp" th:text="${#temporals.format(#temporals.createNow(), 'HH:mm')}"></div>
                            </div>
                            <div class="ai-message">
                                例如：
                                <ul>
                                    <li>查询所有商品库存</li>
                                    <li>显示仓库1的商品库存情况</li>
                                    <li>将商品A入库100个到仓库1</li>
                                    <li>从仓库2出库50个商品B</li>
                                </ul>
                                <div class="timestamp" th:text="${#temporals.format(#temporals.createNow(), 'HH:mm')}"></div>
                            </div>
                        </div>
                        
                        <form id="aiForm" th:action="@{/ai-assistant/query}" method="post">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" 
                                       name="userInput" id="userInput" 
                                       placeholder="输入自然语言指令..." 
                                       aria-label="输入自然语言指令" 
                                       aria-describedby="button-addon2"
                                       th:value="${userInput != null} ? ${userInput} : ''">
                                <button class="btn btn-primary" type="submit" id="button-addon2">
                                    <i class="bi bi-send"></i> 发送
                                </button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="mt-4" th:if="${result}">
                        <h5>执行结果:</h5>
                        <div class="alert alert-info">
                            已执行您的请求
                            <button class="btn btn-sm btn-outline-secondary float-end" id="toggleSqlBtn">
                                <i class="bi bi-code-slash"></i> 查看SQL
                            </button>
                        </div>
                        
                        <div class="sql-preview" id="sqlPreview">
                            <!-- SQL预览将在这里显示 -->
                        </div>
                        
                        <div th:if="${result instanceof T(java.util.List)}">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th th:each="col : ${result[0].keySet()}" th:text="${col}"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr th:each="row : ${result}">
                                            <td th:each="col : ${row.keySet()}" th:text="${row.get(col)}"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div th:if="${result instanceof T(java.util.Map)}">
                            <div class="alert alert-success">
                                <p th:text="${result.message}"></p>
                                <p>影响行数: <span th:text="${result.rowsAffected}"></span></p>
                                <p>操作类型: <span th:text="${result.operation}"></span></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <th:block layout:fragment="scripts">
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const chatContainer = document.getElementById('chatContainer');
                const userInput = document.getElementById('userInput');
                const toggleSqlBtn = document.getElementById('toggleSqlBtn');
                const sqlPreview = document.getElementById('sqlPreview');
                
                // 添加用户消息到聊天窗口
                function addUserMessage(message) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message-container';
                    
                    const userMsg = document.createElement('div');
                    userMsg.className = 'user-message';
                    userMsg.textContent = message;
                    
                    const timestamp = document.createElement('div');
                    timestamp.className = 'timestamp';
                    timestamp.textContent = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    
                    messageDiv.appendChild(userMsg);
                    messageDiv.appendChild(timestamp);
                    chatContainer.appendChild(messageDiv);
                    
                    // 滚动到底部
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
                
                // 添加AI消息到聊天窗口
                function addAiMessage(message) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message-container';
                    
                    const aiMsg = document.createElement('div');
                    aiMsg.className = 'ai-message';
                    aiMsg.textContent = message;
                    
                    const timestamp = document.createElement('div');
                    timestamp.className = 'timestamp';
                    timestamp.textContent = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    
                    messageDiv.appendChild(aiMsg);
                    messageDiv.appendChild(timestamp);
                    chatContainer.appendChild(messageDiv);
                    
                    // 滚动到底部
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
                
                // 表单提交处理
                document.getElementById('aiForm').addEventListener('submit', function(e) {
                    if (userInput.value.trim() === '') {
                        e.preventDefault();
                        return;
                    }
                    
                    addUserMessage(userInput.value);
                    addAiMessage("正在处理您的请求...");
                });
                
                // 切换SQL预览
                if (toggleSqlBtn) {
                    toggleSqlBtn.addEventListener('click', function() {
                        if (sqlPreview.style.display === 'none') {
                            sqlPreview.style.display = 'block';
                            toggleSqlBtn.innerHTML = '<i class="bi bi-eye-slash"></i> 隐藏SQL';
                            
                            // 获取SQL（模拟，实际应由后端提供）
                            const userInputText = userInput.value;
                            fetch('/ai-assistant/get-sql?query=' + encodeURIComponent(userInputText))
                                .then(response => response.text())
                                .then(sql => {
                                    sqlPreview.textContent = sql;
                                });
                        } else {
                            sqlPreview.style.display = 'none';
                            toggleSqlBtn.innerHTML = '<i class="bi bi-code-slash"></i> 查看SQL';
                        }
                    });
                }
            });
        </script>
    </th:block>
</body>
</html>
```

### 6. 更新侧边栏

在`layout.html`的侧边栏中添加AI助手链接：

```html
<li class="nav-item">
    <a class="nav-link" href="/ai-assistant">
        <i class="bi bi-robot me-2"></i> AI助手
    </a>
</li>
```

### 7. 添加SQL预览端点（可选）

在`AIAssistantController`中添加：

```java
@GetMapping("/get-sql")
@ResponseBody
public String getGeneratedSql(@RequestParam("query") String userInput) {
    try {
        return aiAssistantService.generateSQL(userInput);
    } catch (Exception e) {
        return "无法生成SQL: " + e.getMessage();
    }
}
```

### 8. 安全增强

在`AISQLAssistantService`中添加SQL验证：

```java
private void validateSQL(String sql) {
    String lowerCaseSql = sql.toLowerCase();
    
    // 防止SQL注入和危险操作
    if (lowerCaseSql.contains("drop") || 
        lowerCaseSql.contains("truncate") || 
        lowerCaseSql.contains("alter") ||
        lowerCaseSql.contains("grant") ||
        lowerCaseSql.contains("revoke") ||
        lowerCaseSql.contains(";")) {
        throw new SecurityException("检测到潜在的危险SQL操作");
    }
    
    // 确保只操作允许的表
    List<String> allowedTables = Arrays.asList("product", "warehouse", "stock_in", "stock_out", "inventory");
    boolean containsAllowedTable = false;
    
    for (String table : allowedTables) {
        if (lowerCaseSql.contains(table)) {
            containsAllowedTable = true;
            break;
        }
    }
    
    if (!containsAllowedTable) {
        throw new SecurityException("SQL操作了不允许的表");
    }
}

// 在generateSQL方法中调用
private String generateSQL(String userInput) {
    // ... [原有代码]
    
    // 验证SQL安全性
    validateSQL(sql);
    
    return sql;
}
```

## 系统功能演示

### 使用场景示例

1. **查询库存**:
   - 用户输入: "查询所有商品库存"
   - AI生成SQL: `SELECT p.name, w.name AS warehouse, i.quantity FROM inventory i JOIN product p ON i.product_id = p.id JOIN warehouse w ON i.warehouse_id = w.id`
   - 结果: 表格显示商品在各仓库的库存数量

2. **入库操作**:
   - 用户输入: "将商品A入库100个到仓库1"
   - AI生成SQL: `INSERT INTO stock_in (product_id, warehouse_id, quantity, operator) VALUES ((SELECT id FROM product WHERE name='商品A'), (SELECT id FROM warehouse WHERE name='仓库1'), 100, 'AI助手')`
   - 结果: 显示"操作成功，影响行数: 1"

3. **出库操作**:
   - 用户输入: "从仓库2出库50个商品B"
   - AI生成SQL: `INSERT INTO stock_out (product_id, warehouse_id, quantity, operator) VALUES ((SELECT id FROM product WHERE name='商品B'), (SELECT id FROM warehouse WHERE name='仓库2'), 50, 'AI助手')`
   - 结果: 显示"操作成功，影响行数: 1"

4. **复杂查询**:
   - 用户输入: "显示上个月入库数量最多的5个商品"
   - AI生成SQL: `SELECT p.name, SUM(si.quantity) AS total_in FROM stock_in si JOIN product p ON si.product_id = p.id WHERE si.in_time >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY p.name ORDER BY total_in DESC LIMIT 5`
   - 结果: 表格显示商品名称和入库数量


## 系统特点

1. **自然语言交互**:
   - 用户使用日常语言操作数据库
   - 无需学习SQL语法

2. **安全机制**:
   - SQL注入防护
   - 操作表白名单
   - 危险命令过滤

3. **直观的结果展示**:
   - 查询结果以表格形式展示
   - 操作结果以友好消息显示
   - 可选SQL预览功能

4. **无缝集成**:
   - 与现有出入库管理系统共享数据库
   - 使用相同的数据模型和业务逻辑
   - 统一的UI设计风格

这个AI助手模块使您的出入库管理系统更加智能化和用户友好，大大降低了非技术用户的操作门槛，同时保持了系统的安全性和稳定性。